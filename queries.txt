select sc.score, i.set_num, m.*, s.*, t.* from scores sc
left join inventory_minifigs im on im.fig_num = sc.inventory_number
left join (select * from inventories where (set_num, version) in (
select set_num, max(version) as max_version from inventories group by set_num having max(version))) i on i.id = im.inventory_id
left join minifigs m on sc.inventory_number = m.fig_num
left join sets s on s.set_num = i.set_num
left join themes t on t.id = s.theme_id
where sc.inventory_type = 'm' and s.year_of_publication >= 2017
order by sc.score desc, s.year_of_publication desc;


select * from (select * from inventories group by set_num having max(version)) i
left join inventory_minifigs im on i.id = im.inventory_id
left join (select * from inventories group by set_num having max(version)) ism on im.fig_num = ism.set_num
left join inventory_parts p on p.inventory_id = ism.id
where im.fig_num = 'fig-001822';


select ss.*, s.name, s.year_of_publication, s.num_parts from sets s
left join (select inventory_number, (max(score) + (sum(score_minifig) / count(inventory_minifig_number)) + (1 - ((min(quantity,10) - 1) / (10 - 1)))) / 3 as score from (
select sc.inventory_number, sc.score, scm.inventory_number as inventory_minifig_number, scm.score as score_minifig, s.num_parts, mfq.quantity from scores sc
left join sets s on sc.inventory_number = s.set_num
left join inventory_minifigs im on im.inventory_id = sc.inventory_id
left join scores scm on scm.inventory_number = im.fig_num
left join (select fig_num, sum(quantity) as quantity from inventory_minifigs group by fig_num) mfq on mfq.fig_num = im.fig_num
where sc.inventory_type = 's' and s.theme_id = 676) group by inventory_number) ss on s.set_num = ss.inventory_number
where ss.inventory_number is not null
order by ss.score desc;

select set_num, max(set_score), sum(fig_score) / count(fig_num) as fig_score from (select sc.inventory_number as set_num, sc.score as set_score, scm.inventory_number as fig_num, scm.score as fig_score from scores sc
left join sets s on sc.inventory_number = s.set_num
left join inventory_minifigs im on im.inventory_id = sc.inventory_id
left join scores scm on scm.inventory_number = im.fig_num
where sc.inventory_type = 's' and s.theme_id = 676) group by set_num order by fig_score desc;

select s.set_num, s.name, s.year_of_publication, s.num_parts, (s.retail_price * 1.0) / 100 as retail_price, t1.name as category_l1, t2.name as category_l2, t3.name as category_l3, sc.score, im.fig_num, im.quantity, scm.score as score_minifig from sets s
left join scores sc on s.set_num = sc.inventory_number
left join inventories i on s.set_num = i.set_num
left join inventory_minifigs im on i.id = im.inventory_id
left join inventories invm on im.fig_num = invm.set_num
left join scores scm on invm.set_num = scm.inventory_number
left join themes t1 on s.theme_id = t1.id
left join themes t2 on t1.parent_id = t2.id
left join themes t3 on t2.parent_id = t3.id
where s.eol in ('2', '3');

create view v_scores_all as
select set_num, name, year_of_publication, num_parts, eol, retail_price, category_l1, category_l2, category_l3, score, sum(quantity) as quantity, sum(score_minifig) / sum(quantity) as score_minifig from
(select s.set_num, s.name, s.year_of_publication, s.num_parts, s.eol, (s.retail_price * 1.0) / 100 as retail_price, t1.name as category_l1, t2.name as category_l2, t3.name as category_l3, sc.score, im.fig_num, im.quantity, scm.score * im.quantity as score_minifig from sets s
left join scores sc on s.set_num = sc.inventory_number
left join inventories i on s.set_num = i.set_num
left join inventory_minifigs im on i.id = im.inventory_id
left join inventories invm on im.fig_num = invm.set_num
left join scores scm on invm.set_num = scm.inventory_number
left join themes t1 on s.theme_id = t1.id
left join themes t2 on t1.parent_id = t2.id
left join themes t3 on t2.parent_id = t3.id
where s.eol <> '-1')
group by set_num, name, year_of_publication, num_parts, eol, retail_price, category_l1, category_l2, category_l3, score;


create view 'v_inventory_pure_lego' as
select i.* from (select * from inventories group by set_num having max(version)) i
left join inventory_parts p on p.inventory_id = i.id
left join parts pa on pa.part_num = p.part_num
left join part_categories c on c.id = pa.part_cat_id
group by i.id having not lower(c.name) like 'duplo%';

create view 'v_inventory_minifig_parts' as
select p.inventory_id, p.part_num,p.color_id, p.is_spare, (im.quantity * p.quantity) as quantity from v_inventory_pure_lego i
left join inventory_minifigs im on i.id = im.inventory_id
left join v_inventory_pure_lego ism on im.fig_num = ism.set_num
left join inventory_parts p on p.inventory_id = ism.id
where p.inventory_id is not null;

create view 'v_inventory_parts' as
select p.inventory_id, p.part_num,p.color_id, p.is_spare, p.quantity from v_inventory_pure_lego i
left join inventory_parts p on p.inventory_id = i.id;









// Views

create view 'v_inventory_minifig_parts' as
select inventory_id, part_num, color_id, total_quantity, sum(quantity) as quantity
from (select ip.inventory_id, ip.part_num, ip.color_id, ip.total_quantity, (ip.quantity * im.quantity) as quantity from inventory_minifigs im
left join inventories i on im.fig_num = i.set_num
left join inventory_parts ip on i.id = ip.inventory_id)
group by inventory_id, part_num, color_id, total_quantity;

create view 'v_inventory_parts' as
select inventory_id, part_num, color_id, total_quantity, sum(quantity) as quantity
from (select p.inventory_id, p.part_num, p.color_id, p.quantity, p.total_quantity from (select * from inventories where set_num not in (select fig_num from inventory_minifigs)) i
left join inventory_parts p on p.inventory_id = i.id)
group by inventory_id, part_num, color_id, total_quantity;


// Cleanup statements

delete from inventories where id not in (
select inventory_id from inventory_parts
) and id not in (
select inventory_id from inventory_minifigs
) and id not in (
select inventory_id from inventory_sets
);

delete from inventories where set_num in (
select distinct set_num from sets where theme_id in (
select distinct s1.id from themes s1
where s1.parent_id is null and lower(s1.name) like '%duplo%'
union
select distinct s2.id from themes s1
left join themes s2 on s1.id = s2.parent_id
where s1.parent_id is null and lower(s1.name) like '%duplo%' and s2.id is not null
union
select distinct s3.id from themes s1
left join themes s2 on s1.id = s2.parent_id
left join themes s3 on s2.id = s3.parent_id
where s1.parent_id is null and lower(s1.name) like '%duplo%' and s3.id is not null));


delete from inventories where id not in (
select id from inventories group by set_num having max(version));


delete from inventory_minifigs where inventory_id not in (
select id from inventories);

delete from inventories where set_num like 'fig-%' and set_num not in (select fig_num from inventory_minifigs);

delete from inventory_sets where set_num not in (select set_num from inventories);

delete from inventory_sets where inventory_id not in (
select id from inventories);

delete from inventory_parts where inventory_id not in (
select id from inventories);

delete from inventories where id not in (
select inventory_id from inventory_parts
) and id not in (
select inventory_id from inventory_minifigs
) and id not in (
select inventory_id from inventory_sets
);

delete from sets where set_num not in (
select set_num from inventories);

delete from themes where id not in (
select theme_id from sets);

delete from minifigs where fig_num not in (
select fig_num from inventory_minifigs);

delete from parts where part_num not in (
select part_num from inventory_parts);

delete from colors where id not in (
select color_id from inventory_parts);

delete from part_categories where id not in (
select part_cat_id from parts);

delete from elements where part_num not in (
select part_num from parts) or color_id not in (select id from colors);

delete from part_relationships where child_part_num not in (
select part_num from parts) or parent_part_num not in (select part_num from parts);


Stonewars.de:
"update sets set eol = '3' where set_num in ('" + $x("//td[contains(@class, 'column-setnr') and not(descendant::del)]").map(x =>  x.innerText.replace('(D2C)', '').replace(/[^0-9]/g, '') + '-1').join("','") + "') and eol <> '0';"

update sets set eol = '3' where set_num in ('10255-1','10265-1','10266-1','10270-1','10273-1','10276-1','10278-1','10290-1','10292-1','10293-1','10299-1','10497-1','21325-1','21326-1','21337-1','31203-1','43197-1','75309-1','76215-1','40174-1','40377-1','40378-1','40382-1','40426-1','40461-1','40469-1','40476-1','40477-1','40495-1','40521-1','40539-1','40540-1','40541-1','40542-1','40550-1','40553-1','40554-1','40560-1','40568-1','40570-1','40571-1','40622-1','40623-1','40624-1','40625-1','40626-1','40646-1','80008-1','80030-1','80032-1','80033-1','80034-1','80035-1','80039-1','80110-1','80111-1','21187-1','43203-1','51515-1','71412-1','10289-1','10978-1','10979-1','11022-1','11031-1','31130-1','41721-1','41722-1','41742-1','41961-1','60313-1','60327-1','60394-1','71776-1','75288-1','75292-1','75338-1','75339-1','75342-1','75343-1','75979-1','76209-1','76408-1','76950-1','76956-1','21054-1','31203-1','31205-1','31206-1','31207-1','75571-1','75573-1','75577-1','75578-1','40377-1','40378-1','40476-1','40477-1','40495-1','40539-1','40540-1','40541-1','40542-1','40550-1','40553-1','40554-1','40560-1','40622-1','40623-1','40624-1','40625-1','40626-1','75317-1','80110-1','80111-1','30590-1','30638-1','30639-1','30640-1','60253-1','60313-1','60314-1','60315-1','60317-1','60318-1','60319-1','60320-1','60321-1','60322-1','60323-1','60324-1','60325-1','60327-1','60330-1','60332-1','60333-1','60338-1','60339-1','60341-1','60342-1','60343-1','60346-1','60348-1','60349-1','60350-1','60351-1','60353-1','60354-1','60355-1','60356-1','60357-1','60358-1','60359-1','60360-1','60361-1','60371-1','60382-1','60385-1','60390-1','60393-1','60394-1','60398-1','11015-1','11014-1','11018-1','11019-1','11020-1','11021-1','11022-1','11031-1','30510-1','31123-1','30641-1','30642-1','30643-1','30644-1','31111-1','31118-1','31127-1','31128-1','31130-1','31131-1','31132-1','10255-1','10265-1','10266-1','10270-1','10273-1','10276-1','10278-1','10289-1','10290-1','10292-1','10293-1','10299-1','10497-1','76181-1','76220-1','10780-1','43203-1','10777-1','30646-1','40521-1','41168-1','43187-1','43189-1','43194-1','43196-1','43197-1','43198-1','43199-1','43202-1','43204-1','43207-1','43208-1','43209-1','76830-1','76831-1','76832-1','41962-1','30560-1','30637-1','41801-1','41802-1','41803-1','41805-1','41806-1','41807-1','41808-1','41809-1','41811-1','41947-1','41948-1','41950-1','41951-1','41957-1','41959-1','41960-1','41961-1','41963-1','41964-1','10411-1','10872-1','10882-1','10899-1','10930-1','10938-1','10944-1','10948-1','10949-1','10955-1','10956-1','10960-1','10962-1','10963-1','10964-1','10966-1','10968-1','10972-1','10973-1','10974-1','10976-1','10977-1','10978-1','10979-1','30648-1','30633-1','30634-1','41443-1','41677-1','41696-1','41697-1','41699-1','41703-1','41704-1','41705-1','41707-1','41708-1','41711-1','41712-1','41713-1','41714-1','41715-1','41716-1','41717-1','41718-1','41719-1','41720-1','41721-1','41722-1','41723-1','41726-1','41729-1','41732-1','41733-1','41741-1','41742-1','41743-1','41751-1','41758-1','76989-1','30435-1','30651-1','75968-1','75979-1','76386-1','76398-1','76399-1','76400-1','76401-1','76403-1','76406-1','76408-1','76409-1','76410-1','76411-1','76412-1','21325-1','21326-1','21337-1','76943-1','76945-1','76947-1','76948-1','76950-1','76956-1','10781-1','10784-1','10790-1','30652-1','76187-1','76193-1','76206-1','76207-1','76208-1','76209-1','76211-1','76212-1','76213-1','76215-1','76216-1','76225-1','76230-1','76242-1','76253-1','76255-1','51515-1','21187-1','21164-1','21170-1','21172-1','21177-1','21180-1','21181-1','21183-1','21184-1','21185-1','21186-1','21188-1','21190-1','30647-1','71037-1','71038-1','30656-1','80008-1','80030-1','80032-1','80033-1','80034-1','80035-1','80037-1','80038-1','80039-1','71738-1','71754-1','71756-1','71759-1','71762-1','71770-1','71773-1','30649-1','71757-1','71760-1','71761-1','71763-1','71765-1','71766-1','71767-1','71768-1','71769-1','71771-1','71772-1','71774-1','71775-1','71776-1','71777-1','71778-1','71779-1','71781-1','40426-1','40522-1','40523-1','40570-1','40571-1','30584-1','40174-1','40382-1','40393-1','40461-1','40469-1','40568-1','40646-1','30657-1','76900-1','76901-1','76910-1','76911-1','76912-1','30654-1','75288-1','75292-1','75300-1','75301-1','75309-1','75312-1','75318-1','75320-1','75322-1','75323-1','75324-1','75326-1','75327-1','75329-1','75330-1','75332-1','75334-1','75335-1','75336-1','75338-1','75339-1','75342-1','75343-1','75366-1','71404-1','71407-1','71409-1','71412-1','30509-1','71406-1','71413-1','71414-1','71415-1','71416-1','71417-1','71418-1','42129-1','30655-1','42107-1','42111-1','42117-1','42118-1','42122-1','42123-1','42125-1','42127-1','42128-1','42131-1','42132-1','42133-1','42134-1','42135-1','42137-1','42139-1','42140-1','42144-1');

Lego.com
"update sets set eol = '2' where set_num in ('" + $x("//*[@data-test='product-image-link']").map(x => x.href.match("[0-9]+$")[0] + "-1").join("','") + "') and eol <> '0';"

Y if inventory_number in ['10220-1','10252-1','10256-1','10260-1','10263-1','10268-1','10572-1','10766-1','10767-1','10769-1','10863-1','10883-1','10884-1','10885-1','10889-1','10897-1','10898-1','10904-1','10917-1','10918-1','11003-1','11004-1','11005-1','21039-1','21047-1','21140-1','21141-1','21143-1','21145-1','21156-1','21157-1','21316-1','21317-1','21318-1','31086-1','31087-1','31091-1','31092-1','31094-1','31095-1','31096-1','31098-1','31103-1','31313-1','40172-1','40187-1','40197-1','40309-1','40312-1','40341-1','40342-1','40344-1','40350-1','40351-1','40353-1','40354-1','40359-1','40368-1','40372-1','40418-1','40423-1','41164-1','41169-1','41250-1','41253-1','41256-1','41335-1','41337-1','41360-1','41361-1','41362-1','41366-1','41367-1','41369-1','41371-1','41372-1','41373-1','41374-1','41375-1','41376-1','41378-1','41379-1','41380-1','41381-1','41383-1','41389-1','41391-1','41397-1','41434-1','41435-1','41436-1','41437-1','41438-1','41900-1','41901-1','41902-1','41903-1','41904-1','41905-1','41906-1','41908-1','41912-1','41916-1','41917-1','42082-1','42088-1','42091-1','42095-1','42097-1','42098-1','42101-1','42104-1','43170-1','43172-1','43173-1','43174-1','43178-1','43182-1','43183-1','60203-1','60206-1','60207-1','60208-1','60210-1','60212-1','60213-1','60217-1','60219-1','60222-1','60224-1','60225-1','60227-1','60229-1','60230-1','60231-1','60232-1','60233-1','60234-1','60236-1','60237-1','60255-1','60257-1','70418-1','70419-1','70420-1','70421-1','70422-1','70423-1','70424-1','70425-1','70427-1','70428-1','70429-1','70430-1','70431-1','70432-1','70433-1','70434-1','70435-1','70436-1','70437-1','70665-1','70666-1','70667-1','70668-1','70670-1','70671-1','70672-1','70673-1','70674-1','70675-1','70676-1','70677-1','70678-1','70679-1','70681-1','70682-1','70683-1','70684-1','71713-1','75159-1','75232-1','75234-1','75235-1','75236-1','75238-1','75239-1','75240-1','75241-1','75242-1','75243-1','75244-1','75246-1','75248-1','75250-1','75253-1','75258-1','75263-1','75264-1','75265-1','75894-1','75931-1','75934-1','75937-1','75938-1','75946-1','75953-1','75954-1','75956-1','75957-1','75958-1','75965-1','75971-1','75972-1','75973-1','75974-1','75975-1','75976-1','75977-1','76113-1','76114-1','76115-1','76118-1','76119-1','76120-1','76122-1','76123-1','76124-1','76126-1','76127-1','76128-1','76130-1','76131-1','76137-1','76138-1','76142-1','76144-1','76146-1','76147-1','76148-1','76149-1','80104-1','80105-1','854049-1','88000-1','88002-1','88003-1','88004-1','8869-1','8870-1','8871-1','8879-1','8881-1','8882-1','8883-1','8884-1','8885-1','8886-1'] else N

Update subsets (e.g. CMF):
update sets
set eol = subq.eol
from (select s2.set_num, s.eol from sets s
inner join sets s2 on substring(s.set_num, 1, position('-' in s.set_num)) = substring(s2.set_num, 1, position('-' in s2.set_num)) and s.eol <> s2.eol and s.eol in ('2', '3')) as subq
where subq.set_num = sets.set_num;


// Update total_quantity
create view v_total_quantities as
select part_num, color_id, sum(total_quantity) as total_quantity
from (select part_num, color_id, sum(quantity) as total_quantity
from (select ip.inventory_id, ip.part_num, ip.color_id, (ip.quantity * im.quantity) as quantity
from (select fig_num, sum(quantity) as quantity from inventory_minifigs group by fig_num) im
left join inventories i on im.fig_num = i.set_num
left join inventory_parts ip on i.id = ip.inventory_id)
group by part_num, color_id
union all
select part_num, color_id, sum(quantity) as total_quantity 
from (select p.part_num, p.color_id, p.quantity from (select * from inventories where set_num not in (select fig_num from inventory_minifigs)) i
left join inventory_parts p on p.inventory_id = i.id)
group by part_num, color_id)
group by part_num, color_id;

UPDATE inventory_parts
SET
      total_quantity = (SELECT v_total_quantities.total_quantity 
                            FROM v_total_quantities
                            WHERE v_total_quantities.part_num = inventory_parts.part_num AND 
							v_total_quantities.color_id = inventory_parts.color_id)

WHERE
    EXISTS (
        SELECT *
        FROM v_total_quantities
        WHERE v_total_quantities.part_num = inventory_parts.part_num AND 
							v_total_quantities.color_id = inventory_parts.color_id
    );

drop view v_total_quantities;


create view v_actual_minifig_inventories as
select * from inventory_parts where inventory_id in (
select distinct ifig.id from inventories iset
left join inventory_minifigs im on im.inventory_id = iset.id
left join minifig_inventory_rel mir on mir.inventory_minifig_id = im.id
left join inventories ifig on ifig.id = mir.inventory_id
where iset.set_id is not null and iset.is_latest = 't' and ifig.is_latest = 't')
and is_spare = 'f';

create view v_actual_minifig_scores as
select ami.inventory_id, 1 / ((sum(pcf.total_amount) * 1.0) / sum(ami.quantity)) as score from v_actual_minifig_inventories ami
left join part_color_frequencies pcf on pcf.id = ami.part_color_frequency_id
group by ami.inventory_id;


create view v_actual_minifig_similarities as
select ami.id1, ami.id2, (ami.simi * 1.0 / mi1.num_parts) as pct from (
select id1, id2, count(*) as simi from (
select ami1.inventory_id as id1, ami2.inventory_id as id2 from v_actual_minifig_inventories ami1
left join v_actual_minifig_inventories ami2 on ami1.part_color_frequency_id = ami2.part_color_frequency_id and ami1.inventory_id <> ami2.inventory_id
where ami2.inventory_id is not null) ami
group by id1, id2) ami
left join (select inventory_id, max(inventory_minifig_id) as inventory_minifig_id from minifig_inventory_rel group by inventory_id) mir1 on mir1.inventory_id = ami.id1
left join inventory_minifigs im1 on im1.id = mir1.inventory_minifig_id
left join minifigs mi1 on mi1.id = im1.fig_id;

create view v_actual_minifig_set_occurances as
select subq.fig_id, count(subq.id) as amount from (select im.fig_id, i.id from (select * from inventories where is_latest = 't' and set_id is not null) i
left join inventory_minifigs im on im.inventory_id = i.id
where im.id is not null) as subq
group by subq.fig_id;

create view v_actual_minifig_set_stats as
select im.fig_id, max(s.num_parts) as max_parts,  min(s.num_parts) as min_parts from inventory_minifigs im
left join (select * from inventories where is_latest = 't' and set_id is not null) i on i.id = im.inventory_id
left join sets s on s.id = i.set_id
group by im.fig_id;

CREATE TABLE tmp_fig_similarities (
    id1 INTEGER NOT NULL,
    id2 INTEGER NOT NULL,
    pct NUMERIC NOT NULL
);


insert into tmp_fig_similarities
select  * from v_actual_minifig_similarities where pct >= 0.75;


insert into minifig_similarities (
inventory_minifig_id_1,
inventory_minifig_id_2,
set_occurance_minifig_1,
set_occurance_minifig_2,
max_set_parts_minifig_1,
max_set_parts_minifig_2,
min_set_parts_minifig_1,
min_set_parts_minifig_2,
score_minifig_1,
score_minifig_2,
num_parts_minifig_1,
num_parts_minifig_2,
theme_minifig_1,
theme_minifig_2,
name_minifig_1,
name_minifig_2,
num_minifig_1,
num_minifig_2,
similarity)
select 
mir1.inventory_minifig_id,
mir2.inventory_minifig_id,
amso1.amount,
amso2.amount,
mss1.max_parts,
mss2.max_parts,
mss1.min_parts,
mss2.min_parts,
ams1.score,
ams2.score,
m1.num_parts,
m2.num_parts,
t1.name,
t2.name,
m1.name,
m2.name,
m1.fig_num,
m2.fig_num,
ams.pct
from tmp_fig_similarities ams
left join (select inventory_id, max(inventory_minifig_id) as inventory_minifig_id from minifig_inventory_rel group by inventory_id) mir1 on mir1.inventory_id = ams.id1
left join (select inventory_id, max(inventory_minifig_id) as inventory_minifig_id from minifig_inventory_rel group by inventory_id) mir2 on mir2.inventory_id = ams.id2
left join inventory_minifigs im1 on im1.id = mir1.inventory_minifig_id
left join inventory_minifigs im2 on im2.id = mir2.inventory_minifig_id
left join inventories i1 on im1.inventory_id = i1.id
left join inventories i2 on im2.inventory_id = i2.id
left join sets s1 on i1.set_id = s1.id
left join sets s2 on i2.set_id = s2.id
left join themes t1 on s1.root_theme_id = t1.id
left join themes t2 on s2.root_theme_id = t2.id
left join v_actual_minifig_scores ams1 on ams1.inventory_id = ams.id1
left join v_actual_minifig_scores ams2 on ams2.inventory_id = ams.id2
left join minifigs m1 on m1.id = im1.fig_id
left join minifigs m2 on m2.id = im2.fig_id
left join v_actual_minifig_set_occurances amso1 on amso1.fig_id = m1.id
left join v_actual_minifig_set_occurances amso2 on amso2.fig_id = m2.id
left join v_actual_minifig_set_stats mss1 on mss1.fig_id = im1.fig_id
left join v_actual_minifig_set_stats mss2 on mss2.fig_id = im2.fig_id;

DROP TABLE tmp_fig_similarities;
DROP VIEW v_actual_minifig_set_occurances;
DROP VIEW v_actual_minifig_similarities;
DROP VIEW v_actual_minifig_scores;
DROP VIEW v_actual_minifig_inventories;
DROP VIEW v_actual_minifig_set_stats;


update sets set eol = '3' where set_num in ('10220-1','10252-1','10256-1','10260-1','10263-1','10268-1','10572-1','10766-1','10767-1','10769-1','10863-1','10883-1','10884-1','10885-1','10889-1','10897-1','10898-1','10904-1','10917-1','10918-1','11003-1','11004-1','11005-1','21039-1','21047-1','21140-1','21141-1','21143-1','21145-1','21156-1','21157-1','21316-1','21317-1','21318-1','30628-1','31086-1','31087-1','31091-1','31092-1','31094-1','31095-1','31096-1','31098-1','31103-1','31313-1','40172-1','40187-1','40197-1','40309-1','40312-1','40341-1','40342-1','40344-1','40350-1','40351-1','40353-1','40354-1','40359-1','40368-1','40372-1','40418-1','40423-1','40424-1','41164-1','41169-1','41250-1','41253-1','41256-1','41335-1','41337-1','41360-1','41361-1','41362-1','41366-1','41367-1','41369-1','41371-1','41372-1','41373-1','41374-1','41375-1','41376-1','41378-1','41379-1','41380-1','41381-1','41383-1','41389-1','41397-1','41410-1','41411-1','41412-1','41413-1','41414-1','41420-1','41434-1','41435-1','41436-1','41437-1','41438-1','41900-1','41901-1','41902-1','41903-1','41904-1','41905-1','41908-1','41912-1','41916-1','41917-1','42082-1','42088-1','42091-1','42097-1','42098-1','42101-1','42104-1','43170-1','43173-1','43174-1','43178-1','43182-1','43183-1','60203-1','60206-1','60207-1','60208-1','60210-1','60212-1','60213-1','60217-1','60219-1','60222-1','60224-1','60225-1','60227-1','60229-1','60230-1','60231-1','60232-1','60233-1','60234-1','60236-1','60237-1','60255-1','60257-1','60268-1','70418-1','70419-1','70420-1','70421-1','70422-1','70423-1','70424-1','70425-1','70427-1','70428-1','70429-1','70430-1','70431-1','70432-1','70433-1','70434-1','70435-1','70436-1','70437-1','70665-1','70666-1','70667-1','70668-1','70670-1','70671-1','70672-1','70673-1','70674-1','70675-1','70676-1','70677-1','70678-1','70679-1','70681-1','70682-1','70683-1','70684-1','71699-1','71702-1','71713-1','71714-1','71715-1','71716-1','75159-1','75232-1','75234-1','75235-1','75236-1','75238-1','75239-1','75240-1','75241-1','75242-1','75243-1','75244-1','75246-1','75248-1','75250-1','75253-1','75258-1','75263-1','75264-1','75265-1','75279-1','75894-1','75931-1','75934-1','75937-1','75938-1','75945-1','75946-1','75956-1','75958-1','75965-1','75971-1','75972-1','75973-1','75974-1','75975-1','75976-1','75977-1','75981-1','76113-1','76114-1','76115-1','76118-1','76119-1','76120-1','76122-1','76123-1','76124-1','76126-1','76127-1','76128-1','76130-1','76131-1','76137-1','76138-1','76142-1','76144-1','76147-1','76148-1','76149-1','80104-1','80105-1','854049-1','88000-1','88002-1','88003-1','88004-1','8869-1','8870-1','8871-1','8879-1','8881-1','8882-1','8883-1','8884-1','8885-1','8886-1');

(select 'update sets set eol = ''' || eol || ''' where set_num = ''' || set_num || ''';' as stmt from sets where eol <> '-1' order by set_num)
union all
(select 'insert into set_prices (set_id, retail_price, check_date) select id, ' || sp.retail_price || ', to_date(''' || sp.check_date || ''', ''YYYY-MM-DD'') from sets where set_num = ''' || s.set_num || ''';' as stmt from set_prices sp left join sets s on s.id = sp.set_id order by s.set_num, sp.check_date desc)
union all
(select 'insert into element_prices (element_id, provider_id, price) select id, ''' || 1 || ''', ' || ep.price || ' from part_color_frequency_element_rel where element_id = ''' || pcfer.element_id || ''';' from element_prices ep
left join part_color_frequency_element_rel pcfer on pcfer.id = ep.element_id
order by pcfer.element_id);

create view v_sets as
select s.*, sc.id as score_id from sets s
left join inventories i on i.set_id = s.id and i.is_latest = 1
left join (select * from scores group by inventory_id having max(calc_date)) sc on sc.inventory_id = i.id;

create view v_inventory_minifigs as
select im.*, sc.id as score_id from inventory_minifigs im
left join minifig_inventory_rel mir on mir.inventory_minifig_id = im.id
left join inventories i on mir.inventory_id = i.id and i.is_latest = 1
left join (select * from scores group by inventory_id having max(calc_date)) sc on sc.inventory_id = i.id;


curl --remote-name-all 'https://rebrickable.com/media/downloads/{colors,elements,inventories,inventory_minifigs,inventory_parts,inventory_sets,minifigs,part_categories,part_relationships,parts,sets,themes}.csv.gz'
gunzip *.gz





CREATE VIEW inventory_parts_incl_minifigs AS
SELECT i.id AS inventory_id, ip.part_color_frequency_id, ip.is_spare, im.quantity * ip.quantity AS quantity, FALSE AS is_set FROM (SELECT * FROM inventories WHERE is_latest = TRUE and set_id IS NOT NULL) i
LEFT JOIN inventory_minifigs im ON im.inventory_id = i.id
LEFT JOIN minifig_inventory_rel mir ON mir.inventory_minifig_id = im.id
LEFT JOIN (SELECT * FROM inventories WHERE is_latest = TRUE) i_m ON i_m.id = mir.inventory_id
LEFT JOIN inventory_parts ip ON ip.inventory_id = i_m.id
UNION ALL
SELECT ip.inventory_id, ip.part_color_frequency_id, ip.is_spare, ip.quantity, TRUE AS is_set FROM (SELECT * FROM inventories WHERE is_latest = TRUE and set_id IS NOT NULL) i
LEFT JOIN inventory_parts ip ON ip.inventory_id = i.id;


CREATE VIEW inventory_part_stats AS
SELECT ip.inventory_id, count(distinct ip.part_color_frequency_id) AS varying_parts, sum(ip.quantity) AS total_parts, COUNT(*) FILTER (WHERE pc.id IS NOT NULL) AS num_of_stickers FROM inventory_parts_incl_minifigs ip
LEFT JOIN part_color_frequencies pcf on pcf.id = ip.part_color_frequency_id
LEFT JOIN parts p ON p.id = pcf.part_id
LEFT JOIN (SELECT id FROM part_categories WHERE LOWER(name) LIKE '%stickers%') pc ON pc.id = p.part_cat_id
GROUP BY ip.inventory_id;

CREATE VIEW minifig_stats AS
SELECT i.id AS inventory_id, COALESCE(SUM(im.quantity),0) AS num_figs, COUNT(m.id) AS dist_num_figs, COUNT(*) FILTER (WHERE m.has_unique_part = TRUE) AS exclusive_figs FROM (SELECT * FROM inventories WHERE is_latest = TRUE and set_id IS NOT NULL) i
LEFT JOIN inventory_minifigs im ON im.inventory_id = i.id
LEFT JOIN minifigs m ON m.id = im.fig_id
GROUP BY i.id;

CREATE VIEW latest_score AS
SELECT * FROM scores WHERE id IN (
    SELECT DISTINCT first_value(id) OVER (PARTITION BY inventory_id ORDER BY calc_date DESC) FROM scores ORDER BY 1);


CREATE VIEW inventory_score_stats AS
SELECT * FROM (
SELECT i.id AS inventory_id, ss.score AS set_score, SUM(sm.score * im.quantity) / SUM(im.quantity) AS avg_minifig_score FROM (SELECT * FROM inventories WHERE is_latest = TRUE and set_id IS NOT NULL) i
LEFT JOIN inventory_minifigs im ON im.inventory_id = i.id
LEFT JOIN minifig_inventory_rel mir ON mir.inventory_minifig_id = im.id
LEFT JOIN (SELECT * FROM inventories WHERE is_latest = TRUE) i_m ON i_m.id = mir.inventory_id
LEFT JOIN latest_score ss ON ss.inventory_id = i.id
LEFT JOIN latest_score sm ON sm.inventory_id = i_m.id
GROUP BY i.id, ss.score) AS subq
WHERE subq.set_score > 0;

CREATE VIEW score_ranks AS
SELECT sc.inventory_id, subq1.rank AS total_rank, subq2.rank AS theme_rank, subq3.rank AS year_rank FROM (SELECT sc.id, RANK() OVER (ORDER BY sc.score DESC) FROM latest_score sc) subq1
LEFT JOIN (SELECT sc.id, s.root_theme_id, RANK() OVER (PARTITION BY s.root_theme_id ORDER BY sc.score DESC) FROM latest_score sc
LEFT JOIN inventories i ON i.id = sc.inventory_id
LEFT JOIN sets s ON s.id = i.set_id) subq2 ON subq2.id = subq1.id
LEFT JOIN (SELECT sc.id, s.year_of_publication, RANK() OVER (PARTITION BY s.year_of_publication ORDER BY sc.score DESC) FROM latest_score sc
LEFT JOIN inventories i ON i.id = sc.inventory_id
LEFT JOIN sets s ON s.id = i.set_id) subq3 ON subq3.id = subq1.id
LEFT JOIN latest_score sc ON sc.id = subq1.id;

CREATE VIEW part_distribution AS
SELECT i.id, COUNT(*) FILTER (WHERE pcf.total_amount = 1) AS num_unique_parts, COUNT(*) FILTER (WHERE pcf.total_amount <= 10) AS num_part_occurence_10, COUNT(*) FILTER (WHERE pcf.total_amount <= 50) AS num_part_occurence_50 FROM (SELECT * FROM inventories WHERE is_latest = TRUE AND set_id IS NOT NULL) i
LEFT JOIN inventory_parts ip ON ip.inventory_id = i.id
LEFT JOIN part_color_frequencies pcf ON pcf.id = ip.part_color_frequency_id
GROUP BY i.id;


SELECT * FROM (SELECT s.set_num, s.name, s.year_of_publication, s.eol, s.retail_price, t_root.name, t.name, ip.varying_parts, ip.total_parts, ip.num_of_stickers > 0 AS has_stickers, m.num_figs, m.dist_num_figs, m.exclusive_figs, iss.set_score, sr.total_rank, sr.theme_rank, sr.year_rank, pd.num_unique_parts, pd.num_part_occurence_10, pd.num_part_occurence_50, iss.avg_minifig_score FROM (select * from inventories where is_latest = TRUE and set_id IS NOT NULL) i
LEFT JOIN sets s ON s.id = i.set_id
LEFT JOIN themes t_root ON t_root.id = s.root_theme_id
LEFT JOIN themes t ON t.id = s.theme_id
LEFT JOIN inventory_part_stats ip ON ip.inventory_id = i.id
LEFT JOIN minifig_stats m ON m.inventory_id = i.id
LEFT JOIN inventory_score_stats iss ON iss.inventory_id = i.id
LEFT JOIN score_ranks sr ON sr.inventory_id = i.id
LEFT JOIN part_distribution pd ON pd.id = i.id
WHERE ip.total_parts > 0) AS subq
ORDER BY subq.year_of_publication DESC;

CREATE OR REPLACE VIEW v_inventory_parts AS
SELECT
ip.id,
ip.inventory_id,
p.name,
p.part_num,
p.part_material,
ip.is_spare,
c.name AS color_name,
c.is_trans,
c.rgb,
ip.quantity,
pcf.total_amount,
e.element_id
FROM inventory_parts ip
LEFT JOIN part_color_frequencies pcf ON pcf.id = ip.part_color_frequency_id
LEFT JOIN parts p ON p.id = pcf.part_id
LEFT JOIN colors c ON c.id = pcf.color_id
LEFT JOIN (select DISTINCT part_color_frequency_id, first_value(element_id) OVER (PARTITION BY part_color_frequency_id ORDER BY id DESC) AS element_id from part_color_frequency_element_rel) e ON e.part_color_frequency_id = pcf.id;

CREATE OR REPLACE VIEW v_sets AS 
SELECT
s.id,
s.set_num,
s.name,
s.year_of_publication,
s.num_parts,
s.eol,
s.retail_price,
sc.score,
rt.name AS root_theme,
t.name AS theme,
t.id AS theme_id
FROM sets s
LEFT JOIN scores sc ON sc.id = s.score_id
LEFT JOIN themes rt ON rt.id = s.root_theme_id
LEFT JOIN themes t ON t.id = s.theme_id;
