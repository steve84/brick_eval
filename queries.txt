select sc.score, i.set_num, m.*, s.*, t.* from scores sc
left join inventory_minifigs im on im.fig_num = sc.inventory_number
left join (select * from inventories where (set_num, version) in (
select set_num, max(version) as max_version from inventories group by set_num having max(version))) i on i.id = im.inventory_id
left join minifigs m on sc.inventory_number = m.fig_num
left join sets s on s.set_num = i.set_num
left join themes t on t.id = s.theme_id
where sc.inventory_type = 'm' and s.year_of_publication >= 2017
order by sc.score desc, s.year_of_publication desc;


select * from (select * from inventories group by set_num having max(version)) i
left join inventory_minifigs im on i.id = im.inventory_id
left join (select * from inventories group by set_num having max(version)) ism on im.fig_num = ism.set_num
left join inventory_parts p on p.inventory_id = ism.id
where im.fig_num = 'fig-001822';


select ss.*, s.name, s.year_of_publication, s.num_parts from sets s
left join (select inventory_number, (max(score) + (sum(score_minifig) / count(inventory_minifig_number)) + (1 - ((min(quantity,10) - 1) / (10 - 1)))) / 3 as score from (
select sc.inventory_number, sc.score, scm.inventory_number as inventory_minifig_number, scm.score as score_minifig, s.num_parts, mfq.quantity from scores sc
left join sets s on sc.inventory_number = s.set_num
left join inventory_minifigs im on im.inventory_id = sc.inventory_id
left join scores scm on scm.inventory_number = im.fig_num
left join (select fig_num, sum(quantity) as quantity from inventory_minifigs group by fig_num) mfq on mfq.fig_num = im.fig_num
where sc.inventory_type = 's' and s.theme_id = 676) group by inventory_number) ss on s.set_num = ss.inventory_number
where ss.inventory_number is not null
order by ss.score desc;

select set_num, max(set_score), sum(fig_score) / count(fig_num) as fig_score from (select sc.inventory_number as set_num, sc.score as set_score, scm.inventory_number as fig_num, scm.score as fig_score from scores sc
left join sets s on sc.inventory_number = s.set_num
left join inventory_minifigs im on im.inventory_id = sc.inventory_id
left join scores scm on scm.inventory_number = im.fig_num
where sc.inventory_type = 's' and s.theme_id = 676) group by set_num order by fig_score desc;


create view 'v_inventory_pure_lego' as
select i.* from (select * from inventories group by set_num having max(version)) i
left join inventory_parts p on p.inventory_id = i.id
left join parts pa on pa.part_num = p.part_num
left join part_categories c on c.id = pa.part_cat_id
group by i.id having not lower(c.name) like 'duplo%';

create view 'v_inventory_minifig_parts' as
select p.inventory_id, p.part_num,p.color_id, p.is_spare, (im.quantity * p.quantity) as quantity from v_inventory_pure_lego i
left join inventory_minifigs im on i.id = im.inventory_id
left join v_inventory_pure_lego ism on im.fig_num = ism.set_num
left join inventory_parts p on p.inventory_id = ism.id
where p.inventory_id is not null;

create view 'v_inventory_parts' as
select p.inventory_id, p.part_num,p.color_id, p.is_spare, p.quantity from v_inventory_pure_lego i
left join inventory_parts p on p.inventory_id = i.id;









// Views

create view 'v_inventory_minifig_parts' as
select inventory_id, part_num, color_id, sum(quantity) as quantity, sum(total_quantity) as total_quantity
from (select p.inventory_id, p.part_num, p.color_id, p.is_spare, (im.quantity * p.quantity) as quantity, p.total_quantity from inventories i
left join inventory_minifigs im on i.id = im.inventory_id
left join inventories ism on im.fig_num = ism.set_num
left join inventory_parts p on p.inventory_id = ism.id
where p.inventory_id is not null)
group by inventory_id, part_num, color_id;

create view 'v_inventory_parts' as
select inventory_id, part_num, color_id, sum(quantity) as quantity, sum(total_quantity) as total_quantity
from (select p.inventory_id, p.part_num, p.color_id, p.is_spare, p.quantity, p.total_quantity from inventories i
left join inventory_parts p on p.inventory_id = i.id
where p.inventory_id is not null and i.set_num not like 'fig-%')
group by inventory_id, part_num, color_id;


// Cleanup statements

delete from inventories where id not in (
select inventory_id from inventory_parts
) and id not in (
select inventory_id from inventory_minifigs
) and id not in (
select inventory_id from inventory_sets
);

delete from inventories where set_num in (
select distinct set_num from sets where theme_id in (
select distinct s1.id from themes s1
where s1.parent_id is null and lower(s1.name) like '%duplo%'
union
select distinct s2.id from themes s1
left join themes s2 on s1.id = s2.parent_id
where s1.parent_id is null and lower(s1.name) like '%duplo%' and s2.id is not null
union
select distinct s3.id from themes s1
left join themes s2 on s1.id = s2.parent_id
left join themes s3 on s2.id = s3.parent_id
where s1.parent_id is null and lower(s1.name) like '%duplo%' and s3.id is not null));


delete from inventories where id not in (
select id from inventories group by set_num having max(version));


delete from inventory_minifigs where inventory_id not in (
select id from inventories);

delete from inventories where set_num like 'fig-%' and set_num not in (select fig_num from inventory_minifigs);

delete from inventory_sets where set_num not in (select set_num from inventories);

delete from inventory_sets where inventory_id not in (
select id from inventories);

delete from inventory_parts where inventory_id not in (
select id from inventories);

delete from inventories where id not in (
select inventory_id from inventory_parts
) and id not in (
select inventory_id from inventory_minifigs
) and id not in (
select inventory_id from inventory_sets
);

delete from sets where set_num not in (
select set_num from inventories);

delete from themes where id not in (
select theme_id from sets);

delete from minifigs where fig_num not in (
select fig_num from inventory_minifigs);

delete from parts where part_num not in (
select part_num from inventory_parts);

delete from colors where id not in (
select color_id from inventory_parts);

delete from part_categories where id not in (
select part_cat_id from parts);

delete from elements where part_num not in (
select part_num from parts) or color_id not in (select id from colors);

delete from part_relationships where child_part_num not in (
select part_num from parts) or parent_part_num not in (select part_num from parts);




$x("//*[@class='column-2']").map(x => x.innerText.replace('(D2C)', '').replace(/[^0-9]/g, '') + '-1').join(';')

Y if inventory_number in ['10220-1','10252-1','10256-1','10260-1','10263-1','10268-1','10572-1','10766-1','10767-1','10769-1','10863-1','10883-1','10884-1','10885-1','10889-1','10897-1','10898-1','10904-1','10917-1','10918-1','11003-1','11004-1','11005-1','21039-1','21047-1','21140-1','21141-1','21143-1','21145-1','21156-1','21157-1','21316-1','21317-1','21318-1','31086-1','31087-1','31091-1','31092-1','31094-1','31095-1','31096-1','31098-1','31103-1','31313-1','40172-1','40187-1','40197-1','40309-1','40312-1','40341-1','40342-1','40344-1','40350-1','40351-1','40353-1','40354-1','40359-1','40368-1','40372-1','40418-1','40423-1','41164-1','41169-1','41250-1','41253-1','41256-1','41335-1','41337-1','41360-1','41361-1','41362-1','41366-1','41367-1','41369-1','41371-1','41372-1','41373-1','41374-1','41375-1','41376-1','41378-1','41379-1','41380-1','41381-1','41383-1','41389-1','41391-1','41397-1','41434-1','41435-1','41436-1','41437-1','41438-1','41900-1','41901-1','41902-1','41903-1','41904-1','41905-1','41906-1','41908-1','41912-1','41916-1','41917-1','42082-1','42088-1','42091-1','42095-1','42097-1','42098-1','42101-1','42104-1','43170-1','43172-1','43173-1','43174-1','43178-1','43182-1','43183-1','60203-1','60206-1','60207-1','60208-1','60210-1','60212-1','60213-1','60217-1','60219-1','60222-1','60224-1','60225-1','60227-1','60229-1','60230-1','60231-1','60232-1','60233-1','60234-1','60236-1','60237-1','60255-1','60257-1','70418-1','70419-1','70420-1','70421-1','70422-1','70423-1','70424-1','70425-1','70427-1','70428-1','70429-1','70430-1','70431-1','70432-1','70433-1','70434-1','70435-1','70436-1','70437-1','70665-1','70666-1','70667-1','70668-1','70670-1','70671-1','70672-1','70673-1','70674-1','70675-1','70676-1','70677-1','70678-1','70679-1','70681-1','70682-1','70683-1','70684-1','71713-1','75159-1','75232-1','75234-1','75235-1','75236-1','75238-1','75239-1','75240-1','75241-1','75242-1','75243-1','75244-1','75246-1','75248-1','75250-1','75253-1','75258-1','75263-1','75264-1','75265-1','75894-1','75931-1','75934-1','75937-1','75938-1','75946-1','75953-1','75954-1','75956-1','75957-1','75958-1','75965-1','75971-1','75972-1','75973-1','75974-1','75975-1','75976-1','75977-1','76113-1','76114-1','76115-1','76118-1','76119-1','76120-1','76122-1','76123-1','76124-1','76126-1','76127-1','76128-1','76130-1','76131-1','76137-1','76138-1','76142-1','76144-1','76146-1','76147-1','76148-1','76149-1','80104-1','80105-1','854049-1','88000-1','88002-1','88003-1','88004-1','8869-1','8870-1','8871-1','8879-1','8881-1','8882-1','8883-1','8884-1','8885-1','8886-1'] else N


// Update total_quantity

create view v_total_quantities as
select part_num, color_id, is_spare, sum(quantity) as total_quantity from inventory_parts ip
group by part_num, color_id, is_spare;

UPDATE inventory_parts
SET
      total_quantity = (SELECT v_total_quantities.total_quantity 
                            FROM v_total_quantities
                            WHERE v_total_quantities.part_num = inventory_parts.part_num AND 
							v_total_quantities.color_id = inventory_parts.color_id AND
							v_total_quantities.is_spare = inventory_parts.is_spare) - inventory_parts.quantity

WHERE
    EXISTS (
        SELECT *
        FROM v_total_quantities
        WHERE v_total_quantities.part_num = inventory_parts.part_num AND 
							v_total_quantities.color_id = inventory_parts.color_id AND
							v_total_quantities.is_spare = inventory_parts.is_spare
    );

drop view v_total_quantities;